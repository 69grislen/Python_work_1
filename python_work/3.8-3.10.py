#3_8
countries = ['japane','moroko', 'brazilia', 'usa', 'africa',]
print(countries)

print(sorted(countries)) #в алфавитный порядок
print(countries) #все еще хранится в исходном виде

print(sorted(countries,reverse=True)) #вывели в обратном алфовитном порядке
#reverse=True пишем после запятой
print(countries)

countries.reverse() #изменили порядок элементов списка сзади на перед
print(countries)

countries.reverse()
print(countries) #вернули порядок элементов списка в исходный вид


countries.sort() #отсортировали список в алфовитном порядке
print(countries)

countries.sort(reverse=True) #отссортировали в обратномалфовитном порядке
print(countries)

#3_9 выполнено в файле 3.4-3.7.py


#3_10
rivers = ['ural', 'pechora', 'kama']
print(rivers)

rivers.sort()
print(rivers)

rivers.sort(reverse=True)
print(rivers)

print("Нормальный порядок")
print(rivers)

print("Новый порядок в списке")
print(sorted(rivers))

print("Но хранится все в старом порядке")
print(rivers)


print("Список до reverse")
print(rivers)

print("Список после reverse")
rivers.reverse()  #Просто в обратном порядке
print(rivers)


rivers_length = len(rivers)
print(f"В моём списке всего {rivers_length} рек")

#  Если в вашей программе происходит ошибка индексирования,
#  попробуйте уменьшить запрашиваемый индекс на 1. Затем снова запустите
# программу и проверьте правильность результатов.
#Потому ,что для Python третьим является элемент с индексом 2, потому что индексирование начинается с 0.
#Помните, что для обращения к последнему элементу в списке используется индекс –1

#ПРИМЕЧАНИЕ Если в вашей программе произошла ошибка индексирования и вы не
#знаете, как с ней справиться, попробуйте вывести список или хотя бы его длину.
# Возможно, ваш список выглядит совсем не так, как вы думаете,
# особенно если его содержимое динамически определялось программой.
# Фактическое состояние списка или точное
#количество элементов в нем поможет вам выявить логические ошибки такого рода.



