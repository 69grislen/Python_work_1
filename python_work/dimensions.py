#Кортежи - неизменяемый список () заместо [] !!!!!!!

# Кортеж выглядит как список, не считая того, что вместо квадратных скобок используются круглые скобки.
# После определения кортежа вы можете обращаться
# к его отдельным элементам по индексам точно так же, как это делается при работе
# со списком.

dimensions = (200,50)  #создали кортеж , вместо квадратных скобок используются круглые
print(dimensions[0])  #выводим первый элемент кортежа  как в обычном списке , тут это 0
print(dimensions[1])  #выводим второй элемент кортежа , тут это 1

#в самом кортеже все пишем в () , а в ост случаях таких как обращение к индексам  [] !!!!!

#dimensions[0] = 250   #выводит ошибку о невозможности присванивания нового элемента к кортежу

# Если вы хотите определить кортеж,!!!!
# состоящий из одного элемента, включите завершающую запятую:
my_t = (3,) # кортеж из одного элемента !!!!!!!!!!

# Обычно создание кортежа из одного элемента не имеет особого смысла. Тем не менее
# это может произойти при автоматическом генерировании кортежей.


#Перебор всех значений в кортеже

# Для перебора всех значений в кортеже используется цикл for, как и при работе со
# списками:

dimensions = (200,50)
for dimension in dimensions:
    print(dimension)
#Python возвращает все элементы кортежа по аналогии с тем, как это делается сосписком:


#Замена кортежа

# Элементы кортежа не могут изменяться, но вы можете присвоить новое значение
# переменной, в которой хранится кортеж.

dimensions = (200,50)

print("Original dimensions:") #оригинальное значение кортежа
for dimension in dimensions:
    print(dimension)

dimensions = (400,100)

print("\nModified dimensions:")  #модифицированное значение кортежа (вручную по новой вписали)
for dimension in dimensions:
    print(dimension)

# По сравнению со списками структуры данных кортежей относительно просты.!!!!!!!!!!!
# Используйте их для хранения наборов значений, которые не должны изменяться!!!!!!!!!!!
# на протяжении жизненного цикла программы.!!!!!!!










